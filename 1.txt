12345

67890

258

在推送代码前应该先拉取代码
    
       当我们基于远程仓库的某次提交记录进行开发后，需要将我们本地仓库推送到远程仓库，

        但是在推送之前，我们一般会先用 git pull 拉取远程仓库的代码，
        	这是因为可能别人已经向远程仓库进行了提交，
	那我们在提交我们的代码前需要先把别人已经提交的代码拉取下来进行合并后再提交，
        而 git pull 就干了这么一件事。

         那 git pull 和 git fetch 有什么区别呢？

	git fetch 仅仅是将远程仓库的更新拉取到本地仓库，
                  更新本地仓库中对远程仓库的引用等信息，
	同时会生成 FETCH_HEAD 文件保存对应远程分支的最新提交记录的 sha-1 值，
	作为我们后续的合并的依据，
	也就是说，git fetch 只拉取远程仓库的更新，而不会将其合并到本地。
          但 git pull 除了将远程仓库的更新拉取下来，还会自动进行合并操作，
	也就是将远程关联于本地当前分支的更新合并到本地分支，并且生成一次新的提交记录。
           这就相当于说，git pull 就等于 git fetch ＋ git merge FETCH_HEAAD。

           一般来说，其实更推荐先用 git fetch 拉取更新，再用 git merge 其合并
，因为这样我们可以考虑是否要将远程仓库的更新合并到我们本地！

其他常用的命令

	git branch -r：列出所有远程分支。
	git branch -a：列出所有分支。
	git branch -vv：列出本地分支和远程分支的映射信息。
	git remote -v：查看远程仓库的详细信息。
	git remote show <远程仓库名>：查看对应远程仓库的详细信息。
	git push <远程仓库名> <本地分支名>:<远程分支名>：本地分支推到指定远程仓库的远程分支上。
	git push <远程仓库名> :<远程分支名>：删除远程库中的指定分支（相当于推送一个空分支上去）
